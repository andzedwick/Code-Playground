The Levenshtein Distance Algorithm is an algorithm that calculates the minimum distance between two strings. For example, to change the word "ate" into the word "eat" the minimum number of character edits is 2 (inserting the letter 'e' at the beginning of "ate", and deleting the letter 'e' at the end). Implementations of the Levenshtein Distance Algorithm can be used used in Spell Checkers, Search Engines, and anything that requires a comparison of multiple strings.

This project holds two implementations of the Levenshtein Distance Algorithm I've created in Powershell and in Python. Both display the decision graph that is created by the program while making its calculations. Both are non-recursive implementations.
